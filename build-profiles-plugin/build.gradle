group = 'build-profiles'
version = '2.0'

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "com.gradle.publish:plugin-publish-plugin:0.9.4"
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.1"

    }
}

repositories {
    // Also needed for codenarc plugin to work correctly
    mavenCentral()
}

apply plugin: 'com.gradle.plugin-publish'
apply plugin: 'groovy'
apply plugin: 'maven'
apply plugin: 'codenarc'
apply plugin: 'findbugs'
apply plugin: 'org.sonarqube'

sonarqube {
    properties {
        property "sonar.projectName", "Gradle build profiles plugin"
        property "sonar.projectKey", "build-profiles"
        property "sonar.jacoco.reportPath", "${project.buildDir}/jacoco/test.exec"
        property "sonar.host.url", "http://localhost:8000"
    }
}

codenarc {
    ignoreFailures = false
    sourceSets = [sourceSets.main]
    reportsDir = file("$project.buildDir/reports/codenarc")
    configFile = file("codenarcConfig.xml")
}

findbugs {
    ignoreFailures = false
    sourceSets = [sourceSets.main]
    reportsDir = file("$project.buildDir/reports/findbugs")
    effort = "max"
}

pluginBundle {
    website = 'https://github.com/YahyaAlfayad/gradle-build-profiles'
    vcsUrl = 'https://github.com/YahyaAlfayad/gradle-build-profiles'
    description = 'Support multiple build profiles for your project. You can activate/deactivate profiles during gradle call. Check plugin site for more details: https://github.com/YahyaAlfayad/gradle-build-profiles'
    tags = ['build', 'profile', 'profiles', 'build-profiles']

    plugins {
        buildProfilesPlugin {
            id = 'net.yhf.build-profiles'
            displayName = 'Build Profiles Plugin'
        }
    }
}

dependencies {
    compile gradleApi()
    testCompile group: 'commons-io', name: 'commons-io', version: '2.5'
}

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: uri('../repo'))
        }
    }
}

uploadArchives.doFirst {
    def localRepoFolder = file('../repo')
    localRepoFolder.deleteDir()
}