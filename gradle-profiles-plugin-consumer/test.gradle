void testApplyProfilesPlugin() {
    project.apply plugin: 'net.yhf.build-profiles'

    assert project.plugins.hasPlugin('net.yhf.build-profiles')
}

void testAddingTwoProfiles() {
    buildProfilesConfig {
        buildProfile {
            name = 'uat'
            active = false
        }
        buildProfile {
            name = 'prod'
            active = true
        }
    }

    project.sourceSets.main.java.asFileTree.with {
        assert source.findAll {
            it == 'src/main/java-prod'
        }
        assert !source.findAll {
            it == 'src/main/java-uat'
        }
    }
}

void testCreateProfiles() {

    // TODO test overwrite already existing sources
    def testProfile1MainSourcesFolder = project.file('src/main/java-testprofile1')
    def testProfile1MainResourcesFolder = project.file('src/main/resources-testprofile1')

    def testProfile1TestSourcesFolder = project.file('src/test/java-testprofile1')
    def testProfile1TestResourcesFolder = project.file('src/test/resources-testprofile1')

    def testProfile2MainSourcesFolder = project.file('src/main/java-testprofile2')
    def testProfile2MainResourcesFolder = project.file('src/main/resources-testprofile2')

    def testProfile2TestSourcesFolder = project.file('src/test/java-testprofile2')
    def testProfile2TestResourcesFolder = project.file('src/test/resources-testprofile2')

    assert !testProfile1MainSourcesFolder.exists()
    assert !testProfile1MainResourcesFolder.exists()
    assert !testProfile1TestSourcesFolder.exists()
    assert !testProfile1TestResourcesFolder.exists()
    assert !testProfile2MainSourcesFolder.exists()
    assert !testProfile2MainResourcesFolder.exists()
    assert !testProfile2TestSourcesFolder.exists()
    assert !testProfile2TestResourcesFolder.exists()

    // TODO test custom source folders

    buildProfilesConfig {
        buildProfile {
            name = 'testprofile1'
            active = false
        }
        buildProfile {
            name = 'testprofile2'
            active = true
        }
    }

    tasks.createProfilesMainSources.action()
    assert testProfile1MainSourcesFolder.exists()
    assert testProfile2MainSourcesFolder.exists()

    tasks.createProfilesMainResources.action()
    assert testProfile1MainResourcesFolder.exists()
    assert testProfile2MainResourcesFolder.exists()

    tasks.createProfilesTestSources.action()
    assert testProfile1TestSourcesFolder.exists()
    assert testProfile2TestSourcesFolder.exists()

    tasks.createProfilesTestResources.action()
    assert testProfile1TestResourcesFolder.exists()
    assert testProfile2TestResourcesFolder.exists()

    // Clean up after test

    testProfile1MainSourcesFolder.delete()
    testProfile1MainResourcesFolder.delete()
    testProfile1TestSourcesFolder.delete()
    testProfile1TestResourcesFolder.delete()

    testProfile2MainSourcesFolder.delete()
    testProfile2MainResourcesFolder.delete()
    testProfile2TestSourcesFolder.delete()
    testProfile2TestResourcesFolder.delete()
}

void testCustomProfileSources() {
    buildProfilesConfig {
        buildProfile {
            name = 'uat'
            active = false
        }
        buildProfile {
            name = 'prod'
            active = true
            sourceSets {
                main {
                    java {
                        srcDirs = ['src/main/java-prd']
                    }
                    resources {
                        srcDirs = ['src/main/resources-prd']
                    }
                }
            }
        }
    }
    project.sourceSets.main.java.asFileTree.with {
        assert source.findAll {
            it == 'src/main/java-prd'
        }
        assert !source.findAll {
            it == 'src/main/java-prod'
        }
        assert !source.findAll {
            it == 'src/main/java-uat'
        }
    }

    project.sourceSets.main.resources.asFileTree.with {
        assert source.findAll {
            it == 'src/main/resources-prd'
        }
        assert !source.findAll {
            it == 'src/main/resources-prod'
        }
    }
}

void testProfileSpecificRepositories() {
    buildProfilesConfig {
        buildProfile {
            name = 'uat'
            active = false
            repositories {
                maven {
                    url 'http://www.google.com/m2'
                }
            }
        }
        buildProfile {
            name = 'prod'
            active = true
            repositories {
                jcenter()
                maven {
                    url 'https://plugins.gradle.org/m2/'
                }
            }
        }
    }

    String jcenterUrl = project.repositories.jcenter().url.toString()

    assert project.repositories.findAll {
        it.url.toString() == 'https://plugins.gradle.org/m2/'
    }
    assert project.repositories.findAll {
        it.url.toString() == jcenterUrl
    }
    assert !project.repositories.findAll {
        it == 'http://www.google.com/m2'
    }
}

void testProfileSpecificPlugin() {
    buildProfilesConfig {
        buildProfile {
            name = 'uat'
            active = false
            apply plugin: 'antlr'
        }
        buildProfile {
            name = 'prod'
            active = true
            apply plugin: 'eclipse'
        }
    }

    project.plugins.with {
        assert hasPlugin('eclipse')
        assert !hasPlugin('antlr')
    }
}

void testProfileSpecificDependencies() {
    buildProfilesConfig {
        buildProfile {
            name = 'uat'
            active = false
        }
        buildProfile {
            name = 'prod'
            active = true
            dependencies {
                compile group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.21'
                runtime group: 'org.apache.commons', name: 'commons-math3', version: '3.0'
            }
        }
    }

    project.configurations.with {
        assert compile.findAll {
            it.name == 'slf4j-simple-1.7.21.jar'
        }
        assert runtime.findAll {
            it.name == 'commons-math3-3.0.jar'
        }
        assert !compile.findAll {
            it.name == 'commons-math3-3.0.jar'
        }
    }
}

task testPlugin << {
    testApplyProfilesPlugin()
    testAddingTwoProfiles()
    testCreateProfiles()
    testCustomProfileSources()
    testProfileSpecificRepositories()
    testProfileSpecificPlugin()
    testProfileSpecificDependencies()
}

test.dependsOn testPlugin
